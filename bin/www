#!/usr/bin/env node

const app = require('../index.js');
const http = require('http');
const mongoose = require('mongoose');

const host = process.env.HOST || 'localhost';
const port = normalizePort(process.env.PORT || '3001');
const nodeEnv = process.env.NODE_ENV || 'development';
app.set('port', port);

const server = http.createServer(app);
server.on('error', onError);
server.on('listening', onListening);

const dbUri = `mongodb://${host}/cooper_${nodeEnv}`;
mongoose.Promise = require('bluebird');
mongoose.connect(dbUri, {useMongoClient: true});
const db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', () => {
  console.log(`db open at ${dbUri}`);
  server.listen(port);
});

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log(`Listening on ${bind}`);
}
